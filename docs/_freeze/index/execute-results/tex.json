{
  "hash": "59fe82716dcc4ac24049c4157f412559",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pokemon GO Battle Assistant\"\nsubtitle: \"A Machine Learning-Based Battle Prediction System\"\n---\n\n## Introduction\n\nThe Pokemon GO Battle Assistant is an advanced prediction system that uses machine learning to help trainers make strategic decisions in Pokemon GO battles. By analyzing Pokemon statistics, battle mechanics, and historical performance data, our system predicts battle outcomes with high accuracy and provides recommendations for optimal team composition.\n\n## Key Features\n\n- **Battle Outcome Prediction**: Predicts the winner of 1v1 Pokemon battles using Random Forest models\n- **Pokemon Statistics Analysis**: Detailed analysis of Pokemon stats, types, and movesets\n- **Data-Driven Insights**: Uses data from thousands of simulated battles for training\n- **Type Effectiveness Calculations**: Factors in complex type interactions that affect battle outcomes\n\n## Technical Implementation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as patches\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a flow chart showing the system components\ncomponents = ['Data Collection', 'Data Processing', 'Feature Engineering', 'Model Training', 'Prediction System']\npositions = np.arange(len(components))\ncolors = ['#3498db', '#2ecc71', '#f39c12', '#9b59b6', '#e74c3c']\n\n# Draw flow chart boxes\nfor i, (component, color) in enumerate(zip(components, colors)):\n    rect = patches.Rectangle((i*2, 0), 1.5, 1, linewidth=1, edgecolor='black', facecolor=color, alpha=0.7)\n    ax.add_patch(rect)\n    ax.text(i*2 + 0.75, 0.5, component, ha='center', va='center', fontweight='bold')\n    \n    # Add arrow\n    if i < len(components) - 1:\n        ax.arrow(i*2 + 1.5, 0.5, 0.5, 0, head_width=0.1, head_length=0.1, fc='black', ec='black')\n\n# Clean up the plot\nax.set_xlim(-0.5, 10)\nax.set_ylim(-0.5, 1.5)\nax.axis('off')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Core components of the Pokemon GO Battle Assistant system.](index_files/figure-pdf/fig-implementation-output-1.pdf){#fig-implementation fig-pos='H'}\n:::\n:::\n\n\n## Data Sources\n\nOur system utilizes three primary data sources:\n\n1. **Pokemon Statistics & Rankings**: Comprehensive dataset of Pokemon attributes from PvPoke.com\n2. **Battle Simulation Data**: 15,000+ simulated battle outcomes with detailed performance metrics\n3. **Pokemon Type & Move Data**: Reference data for type effectiveness and move properties\n\n## Machine Learning Approach\n\nThe core of our system is a **Random Forest model** trained on thousands of battle scenarios. The model learns complex patterns in:\n\n- Pokemon type effectiveness relationships\n- Stat advantages/disadvantages\n- Move selection and energy management\n- Overall battle performance\n\nFor detailed information about our approach, see the [Modelling Report](modelling_report.qmd).\n\n## Project Documentation\n\nThis documentation provides comprehensive details on:\n\n- [Data Collection & Processing](data_report.qmd)\n- [Modelling Approach & Results](modelling_report.qmd)\n- [Evaluation Metrics & Performance](evaluation.qmd)\n- [Project Development Process](project_charta.qmd)\n\n",
    "supporting": [
      "index_files\\figure-pdf"
    ],
    "filters": []
  }
}